<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2845 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2845.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4033 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5625 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5625.xml">
<!ENTITY RFC6891 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC6975 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6975.xml">
<!ENTITY RFC8080 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8080.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-huque-dnssec-alg-nego-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <title abbrev="DNSSEC Algorithm Negotiation">Algorithm Negotiation in DNSSEC</title>

    <author fullname="Shumon Huque" initials="S." surname="Huque">
      <organization>Salesforce</organization>
      <address>
        <email>shuque@gmail.com</email>
	</address>
	</author>

    <author fullname="Haya Shulman" initials="H." surname="Shulman">
      <organization>Fraunhofer Institute</organization>
      <address>
        <email>haya.shulman@gmail.com</email>
	</address>
	</author>

    <date day="03" month="July" year="2017" />

    <!-- Meta-data Declarations -->

    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>Internet-Draft</keyword>
    <keyword>DNS</keyword>
    <keyword>DNSSEC</keyword>
    <keyword>Signature</keyword>
    <keyword>Algorithm</keyword>
    <keyword>Negotiation</keyword>
    <keyword>Selection</keyword>
    <keyword>Indication</keyword>

    <abstract>
      <t>
	This document specifies a DNS extension that allows a DNS client
	to specify a list of DNSSEC algorithms, in preference order, that
	the client supports. A DNS server upon receipt of this extension
	can choose to selectively respond with DNSSEC signatures using
	the most preferred algorithm they support. This mechanism may make
	it easier for DNS zone operators to support signing zone data
	simultaneously with multiple DNSSEC algorithms, without significantly
	increasing the size of DNS responses. It will also allow an easier
	way to transition to new algorithms while still retaining support
	for older DNS validators that do not yet support the new algorithms.
      </t>
    </abstract>
  </front>


  <middle>

    <section title="Introduction">
      <t>
	The DNS Security Extensions (DNSSEC) specifications
	<xref target="RFC4033" /> <xref target="RFC4034" />
	<xref target="RFC4035" />
	support multiple signature algorithms. A DNS zone can be
	signed simultaneously with multiple algorithms, but there
	is no provision in the current specifications to negotiate the
	selective delivery of signatures of a specific algorithm in DNS
	responses.
      </t>
      <t>
	In contrast, many other security protocols, like TLS, IKE,
	SSH and others, support an algorithm or cipher suite
	negotiation mechanism to enable the client and server to
	select the "best" algorithm they jointly support.
      </t>
      <t>
	This means that DNS servers have to send responses with
	signatures of all algorithms that the requested data are
	signed with, which can result in significantly large responses.
	Not only is this inefficient in terms of the additional communication
	and processing overhead, but it often causes a variety of
	operational problems. Most DNS queries and responses utilize UDP
	transport today. While the EDNS0 specification can support very
	large DNS over UDP payload sizes, once they exceed the common
	Internet Path MTU (typically about 1,500 octets), they need to
	be fragmented at the IP layer. Many studies [add citations] have
	shown that IP fragmentation does not work reliably on today's
	Internet, because fragments are often blocked by network
	security devices.
      </t>
      <t>
	DNS can run over other transports that can obviate the IP
	fragmentation problem, such as TCP (with Path MTU discovery
	or a suitably configured Maximum Segment Size) and TLS. In
	fact, some operators are known to truncate a DNS payload in
	preference to emitting a a response that is likely to be
	fragmented, instructing the client to re-query over TCP. However,
	these alternative transports have not been widely deployed in
	the field, and there is some reluctance by operators to make
	wide use of TCP or TLS because of their added processing and
	performing costs. This situation may change over time, but at
	least today, the dominant transport for DNS query and response
	remains UDP.
      </t>
      <t>
	The response size issue is also a significant barrier to the
	introduction of new algorithms in DNSSEC. As can be readily seen
	from the RSA to ECDSA transition, very few zones have transitioned
	from RSA to ECDSA, and furthermore, very few have been willing to
	sign their zones with multiple algorithms. Newer DNSSEC algorithms
	have already appeared or are being proposed:
	<xref target="RFC8080">EdDSA</xref>,
	<xref target="nsec5">NSEC5</xref>, and some time time in the near
	there will be post quantum algorithms. These will likely
	require zone operators to deploy multiple algorithms, and
	support older algorithms for an extended period of time until
	the population of validators have upgraded themselves to support
	the newer algorithms.
      </t>
      <t>
	This document proposes a new mechanism by which a DNS client
	when sending a query can indicate an ordered list of DNSSEC
	signature algorithms it supports. The DNS server can use this
	information to selectively construct a response with only the
	signatures using the most preferred algorithm that it supports.
      </t>
    </section>


    <section title="DNSSEC Preferred Algorithms Option">
      <t>
	The EDNS0 specification outlined in <xref target="RFC6891" />
	defines a way to include new options using a standardized mechanism.
	These options are contained in the RDATA of the OPT meta resource
	record. This document defines a new EDNS0 option called "DNSSEC
	Preferred Algorithms" used by a client to indicate an ordered list
	of DNSSEC signature algorithms that it supports and prefers. This
	option can appear only once in an OPT RR.
      </t>

      <figure>
        <artwork><![CDATA[

       0                       8                      16
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
       |                  OPTION-CODE                  |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
       |                  LIST-LENGTH                  |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
       |       ALG-CODE        |        ...            |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

        ]]></artwork>
      </figure>

      <t>
	OPTION-CODE is the code (TBD) assigned by IANA for this
	EDNS0 option.
      </t>
      <t>
	LIST-LENGTH is the length of the list of digital signatures or hash
	algorithm codes in octets.  Each algorithm code occupies a single
	octet.
      </t>
      <t>
	ALG-CODE is the list of assigned values of DNSSEC zone signature
	algorithms that the client prefers to be used. The algorithms are
	listed in the order preferred by the client.
      </t>
    </section>


    <section anchor="Not6975" title="Why not use RFC 6975 for Algorithm Signaling?">
      <t>
	The new EDNS0 option described in this document is very similar
	to the DNSSEC Algorithm Understood (DAU) option defined in
	<xref target="RFC6975" /> (Signaling Cryptographic Algorithm
	Understanding). That specification has not seen much adoption or
	even implementation, and it has been suggested that it could be
	repurposed to implement the algorithm negotation mechanism described
	in this document.
      </t>
      <t>
	This document proposes a new option instead, because the RFC6975
	option could not be reused without significantly revising its
	semantics. For example, it currently says that the list of
	algorithm codes is unordered, and that the server must not
	infer any ordering or preferences from the list. Furthermore,
	it states that the option must not trigger any special processing
	on the server side.
      </t>
    </section>


    <section anchor="client" title="Changes to Clients">
      <t>
	A client is defined to be any DNS speaker that issues a
	query, e.g. a stub resolver, a resolver issuing outbound
	queries to authoritative servers, or to other resolvers etc.
      </t>
      <t>
	A client implementing this specification and configured to
	use it, adds an EDNS0 DNSSEC Preferred Algorithms option to the
	OPT Pseudo Resource Record in the Additional Section of the
	query, listing its supported DNSSEC algorithm numbers in
	preferred order. It only makes sense to add this option if
	the client is requesting DNSSEC signatures, so the DNSSEC-OK
	bit in the EDNS Flags field MUST also be set.
      </t>
      <t>
	As a general rule, to maximize security, the client should 
	prefer stronger DNSSEC algorithms to weaker ones.
      </t>
    </section>


    <section anchor="server" title="Changes to Servers">
      <t>
	A server is defined to be any DNS speaker that sends DNS
	responses, e.g. an authoritative server, or a resolver
	when answering queries from downstream clients.
      </t>
      <t>
	Upon receipt of a query with the DNSSEC-OK bit set, and
	the DNSSEC Preferred Algorithms EDNS0 option, an Authoritative
	Server SHOULD include in its response, DNSSEC signatures using
	only the most preferred algorithm that it supports. It also
	includes the Preferred Algorithms EDNS0 option in the response,
	to indicate that it recognizes the option, and should include
	the list of algorithms supported at the server.
      </t>
      <t>
	If an Authoritative Server has no algorithms in common with
	the Preferred Algorithms list in the incoming query, it MUST
	send back a SERVFAIL response (Response Code 2). This response
	MUST contain the list of algorithms supported by the server
	in the EDNS0 Preferred Algorithms option.
      </t>
      <t>
	If a resolver receives a query from a downstream validating
	client with a Preferred Algorithms list different from its
	own, then it should send outbound queries with the client's
	preferred list, and return answers appropriately.
      </t>
    </section>


    <section anchor="caches" title="Cache Considerations">
      <t>
	A Validating Resolver answering queries with the DNSSEC-OK bit set
	from data in its cache needs to take a few additional steps. If the
	query does not include the Preferred Algorithms option, and the
	resolver has selectively cached signatures of a subset of algorithms
	supported by the zone containing the query domain name, then it
	MUST re-send outbound queries to the authoritative server without
	the Preferred Algorithms option in order to retrieve the entire
	set of signatures for the query. If the query includes the
	Preferred Algorithms option, but prefers algorithms known to be
	supported for the name, but different from what has been cached,
	the resolver MUST again send outbound queries to retrieve answers
	with signatures the client prefers, by copying the client's
	Preferred Algorithms option into the outbound query.
      </t>
    </section>


    <section anchor="downgrade" title="Preventing Downgrade Attacks">
      <t>
	There is no cryptographic integrity protection of EDNS0
	options. In theory, <xref target="RFC2845">Transaction
	Signatures</xref> could be deployed to integrity protect the
	entire query message with per-client keys in closed populations
	of DNS speakers, but this is not a viable mechanism in the
	general case of arbitrary DNS clients and servers on the Internet.
      </t>
      <t>
	Hence an active man-in-the-middle attacker could strip out
	stronger algorithms from the client's supported algorithms list
	and force the server to send back signatures with a weaker algorithm
	than it might have otherwise sent.
      </t>
      <t>
	In order to detect such attacks, the client SHOULD compare
	the zone signing algorithms listed in the zone's authenticated
	DNSKEY RRset, and the preferred list in the query that it sent,
	to the algorithms seen in the response signatures. If signatures
	by the most preferred algorithm they have in common have not been
	sent, this may indicate an algorithm downgrade attack.
      </t>
      <t>
        QUESTION: The server may have its own algorithm ranking policy,
	that might differ from the client. Should we allow the server to
	select the highest ranked algorithm that it shares in common with
	the client's list, regardless of the client's preference? This is
	how some other security protocols do it. But it will likely make
	it harder for the (DNS) client to reliably detect downgrade attacks,
	unless there is a common notion of ranking. One way of addressing
	this is to define a new zone apex resource record that lists the
	zone's preferred order of algorithm numbers. This could be queried
	by resolvers in parallel with DNSKEY RRset queries as part of the
	iterative resolution process, and similarly cached and refreshed.
      </t>
    </section>


    <section anchor="middleboxes" title="Dealing with Proxies and Middleboxes">
      <t>
	EDNS is a hop-by-hop mechanism. Hence all DNS speakers in the path
	from the querier invoking this option to the responding server
	need to support this mechanism for it to work correctly. DNS proxies
	along the path that transparently relay requests and responses, and
	largely comply with the implementation guidelines described in
	<xref target="RFC5625" /> should not be a problem. But more
	complicated proxies, middleboxes, forwarding resolvers, etc that
	actively interpret DNS messages, but do not understand this new
	option, will likely strip off the unrecognized option in their
	outbound queries. The result will be that the responding server
	will send back signatures made with the full set of algorithms.
      </t>
      <t>
	There is always a danger that a misbehaving middlebox might
	block or drop a DNS packet with an unrecognized EDNS option, but
	this is a threat that applies to almost all DNS extension proposals.
	Deployment of new DNS options provides an opportunity to identify
	and remove or fix such misbehaving devices.
      </t>
      <t>
	An alternative end-to-end mechanism is described in
	<xref target="dnssec-nego" /> to workaround DNS speaking
	middleboxes that haven't been upgraded to recognize this option.
	It involves the client encoding the ordered list of algorithms in
	a sequence of labels prepended to the query name, and the addition
	of a new DNSKEY RR (with a new algorithm number) at the authoritative
	server to signal to clients that the server recognizes these
	specially constructed query names. No further details are provided
	in this document, but could be incorporated in future revisions
	if there is interest in developing that solution.
      </t>
    </section>


    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
	This specification builds on earlier work on DNSSEC algorithm
	negotiation by Amir Herzberg and Haya Shulman in
	<xref target="dnssec-nego" />.

      </t>
    </section>


    <section anchor="Security" title="Security Considerations">
      <t>
	[ TODO ]
      </t>
    </section>


    <section anchor="IANA" title="IANA Considerations">
      <t>
	This specification requires the registration of a new value in the
	DNS EDNS0 Option Code Registry, maintained by IANA.
      </t>
    </section>


  </middle>


  <!--  *****BACK MATTER ***** -->

  <back>
    <references title="Normative References">
      &RFC4033;
      &RFC4034;
      &RFC4035;
      &RFC5625;
      &RFC6891;
      &RFC6975;
    </references>

    <references title="Informative References">
      &RFC2845;
      &RFC3552;
      &RFC8080;
      <reference anchor="dnssec-nego" target="http://ieeexplore.ieee.org/document/7031814/">
            <front>
                <title>Cipher-Suite Negotiation for DNSSEC: Hop-by-Hop or End-to-End?</title>
                <author initials="A." surname="Herzberg"><organization /></author>
                <author initials="H." surname="Shulman"><organization /></author>
                <date year="2015" month="February" />
            </front>
            <seriesInfo name="in" value="IEEE Interent Computing" />
      </reference>
      <reference anchor="nsec5"
		 target="https://tools.ietf.org/html/draft-vcelak-nsec5">
        <front>
          <title>NSEC5, DNSSEC Authenticated Denial of Existence</title>
          <author fullname="Jan Vcelak" initials="J" surname="Vcelak" />
          <author fullname="Sharon Goldberg" initials="S" surname="Goldberg" />
          <author fullname="Dimitrios Papadopoulos" initials="D" surname="Papadopoulos" />
          <author fullname="Shumon Huque" initials="S" surname="Huque" />

          <author fullname="David Lawrence" initials="D" surname="Lawrence" />
        </front>
      </reference>
    </references>
  </back>

</rfc>
